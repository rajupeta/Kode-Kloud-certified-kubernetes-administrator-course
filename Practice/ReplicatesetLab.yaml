apiVersion: v1
kind: ReplicaSet
metadata:
  name: replicaset-1
spec:
  replicas: 2
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx

  Run the command: You can check for apiVersion of replicaset by command kubectl api-resources | grep replicaset

kubectl explain replicaset | grep VERSION and correct the apiVersion for ReplicaSet.
controlplane ~ âœ– kubectl api-resources | grep replicaset
replicasets                         rs           apps/v1                           true         ReplicaSet

Then run the command: kubectl create -f /root/replicaset-definition-1.yaml


kubectl get rs new-replica-set -o yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  creationTimestamp: "2024-09-13T00:08:45Z"
  generation: 4
  name: new-replica-set
  namespace: default
  resourceVersion: "1985"
  uid: 309788df-e44f-40ee-aee8-d7cd95c7cd99
spec:
  replicas: 2
  selector:
    matchLabels:
      name: busybox-pod
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: busybox-pod
    spec:
      containers:
      - command:
        - sh
        - -c
        - echo Hello Kubernetes! && sleep 3600
        image: busybox
        imagePullPolicy: Always
        name: busybox-container
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 2
  fullyLabeledReplicas: 2
  observedGeneration: 4
  readyReplicas: 2
  replicas: 2